@{
    Layout = null;
    int NumberOfHoles = 40;
    int NumberOfPlayers = 2;
    string BackgroundColor = "#41748d";
    string HighlightColor = "#ff9";
    int ColWidthPercent = 100 / (NumberOfPlayers + 1);
}

<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=0" />
    <title>Corn Score</title>

    <style>

        * {
            border:0;
            margin:0;
            padding:0;
            box-sizing: border-box;
        }

        body {
            font-family: Arial, Helvetica, sans-serif;
            background-color: @BackgroundColor;
            color: #FFF;
        }

        h1, h2, h3, h4, h5, h6 {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            text-align: center;
            border-bottom: 1px solid #ffd800;
            padding: 5px;
            margin: 5px;
        }

        td {
            width: @(ColWidthPercent)%;
            text-align: center;
        }

        .attention {
            background-color: #FFF;
            color: #000;
            padding: 10px;
            margin: 10px;
        }

        input.score-for-hole {
            background-color: @BackgroundColor;
            border: 1px solid @HighlightColor;
            color: #FFF;
            width: 100%;
            text-align: center;
            height: 40px;
            margin-bottom: 10px;
        }

        input.score-for-hole:focus {
            background-color: @HighlightColor;
            border-color: @BackgroundColor;
            color: #000;
        }

        .calculated-total-score {
            font-weight: bold;
            border-top: 1px solid @HighlightColor;
        }
    </style>

</head>
<body>

    <h1>Cornhole Score Card</h1>
    <table class="score-holder">

        <thead>
            <tr>
                <th>Inning</th>
                <th>Blue</th>
                <th>Silver</th>
            </tr>
        </thead>

        <tbody>
            @for (int holeNum = 1; holeNum <= NumberOfHoles; holeNum++)
            {
                <tr>
                    <td>
                        #@holeNum
                    </td>
                    @for (int playerNum = 1; playerNum <= NumberOfPlayers; playerNum++)
                    {
                        <td>
                            <input class="score-for-hole player@(playerNum)" type="tel" />
                        </td>
                    }
                </tr>
            }

            <tr>
                <td>&Sigma;</td>
                @for (int playerNum = 1; playerNum <= NumberOfPlayers; playerNum++)
                {
                    <td class="calculated-total-score" data-player="player@(playerNum)">54</td>
                }
            </tr>
        </tbody>
    </table>
    <div class="attention new-game-button">
        Reset the game? <strong>NEW GAME</strong>
    </div>

    <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
    <script>
        $(document).ready((function () {

            function updateScoreForPlayer(index, elForPlayerTotal) {
                var $elForPlayerTotal = $(elForPlayerTotal),
                    player = $elForPlayerTotal.data("player"),
                    selectorForPlayer = "input." + player,
                    totalForPlayer = 0;

                $(selectorForPlayer).each(function (index, element) {
                    var containedVal = parseInt($(element).val());
                    if (typeof containedVal === "number" && !isNaN(containedVal)) {
                        totalForPlayer += containedVal;
                    }
                });

                $elForPlayerTotal.html(totalForPlayer);
            };

            function updateAllScores() {
                $(".calculated-total-score").each(updateScoreForPlayer);
            };

            function validateChange() {
                var $changedInputEl = $(this),
                    proposedValue = $changedInputEl.val(),
                    parsedValue = parseInt(proposedValue);

                if (typeof parsedValue === "number" && parsedValue > 0 && !isNaN(parsedValue)) {
                    updateAllScores();
                }
                else {
                    $changedInputEl.val("");
                }
            };

            function resetGameBoard() {
                if (confirm("Really erase all scores and start a new game?")) {
                    $("input.score-for-hole").val("");
                    updateAllScores();
                }
            };

            return function initAndGo() {
                $(".score-for-hole").on("blur", validateChange);
                $(".new-game-button").on("click", resetGameBoard);
                updateAllScores();
            };

        }()))
    </script>

</body>
</html>
